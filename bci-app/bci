#!/usr/bin/env python
"""
BCI (Bitcoin Cloud Infrastructure)
Use linode-cli and shell to spin up and start bitcoin full node.
"""
import linode
import bitcoin
import sys
import time
import logging
import typer

app = typer.Typer()

environments = {
    "dev": {"chain": "test", "vol_size_gb": "50"},
    "test": {"chain": "test", "vol_size_gb": "50"},
    "prod": {"chain": "main", "vol_size_gb": "500"},
}


def set_logger(log_level):
    logging.basicConfig(
        format="%(asctime)s %(levelname)-9s %(funcName)-30s() %(message)s ",
        level=eval(f"logging.{log_level}"),
        datefmt="%Y-%m-%d at %H:%M:%S",
    )

@app.command()
def delete(
    env: str = typer.Argument(..., help=f"The environment: [{', '.join(environments)}]"),
    log_level: str = typer.Option("INFO", help="INFO or DEBUG"),
):
    set_logger(log_level)
    logging.info(f"Deleting environment '{env}'")
    linode.cleanup(env)


@app.command()
def create(
    env: str = typer.Argument(..., help=f"The environment: [{', '.join(environments)}]"),
    log_level: str = typer.Option("INFO", help="INFO or DEBUG"),
):
    set_logger(log_level)
    if env not in environments:
        raise ValueError(f"'{env}' must be one of {environments.keys()}")
    chain = environments[env]["chain"]
    logging.info(f"'{env}' started with values '{environments[env]}'")

    start_time = time.perf_counter()

    vol_label = f"btcvol-{env}"
    linode.cleanup(env)
    linode_id, linode_ip = linode.create_instance(env)
    vol_filesystem_path = linode.create_volume(linode_id, env, vol_label, environments[env]["vol_size_gb"])
    linode.issue_remote_vol_commands(linode_ip, vol_label, vol_filesystem_path)
    bitcoin.launch_bitcoind(linode_ip, chain, vol_label)
    ibl, sod = bitcoin.get_blockchain_info(linode_ip)
    logging.info(f"initialblockdownload = {ibl} with size on disk = {sod}")

    end_time = time.perf_counter()
    logging.info(f"bci completed in {round(end_time - start_time)} seconds.")


@app.command()
def status(
    env: str = typer.Argument(..., help=f"The environment: [{', '.join(environments)}]"),
    log_level: str = typer.Option("INFO", help="INFO or DEBUG"),
):
    set_logger(log_level)
    if env not in environments:
        raise ValueError(f"'{env}' must be one of {environments.keys()}")
    linode_ip = linode.get_ip(env)
    if linode_ip:
        ibl, sod = bitcoin.get_blockchain_info(linode_ip)
        logging.info(f"initialblockdownload = {ibl} with size on disk = {sod}")


if __name__ == "__main__":
    app()
