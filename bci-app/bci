#!/usr/bin/env python
"""
BCI (Bitcoin Cloud Infrastructure)
Use linode-cli and shell to spin up and start bitcoin full node.
"""
import linode
import bitcoin
import sys
import time
import logging
import typer
from rich import print
from enum import Enum, auto

app = typer.Typer(help="Bitcoin Cloud Infrastructure cli")
HELP_MSG_ENV = "The bitcoin node environment"

class BtcEnvironment(str, Enum):
    DEV = "DEV"
    TEST = "TEST"
    PROD = "PROD"

environments = {
    BtcEnvironment.DEV.value: {"chain": "test", "vol_size_gb": "50"},
    BtcEnvironment.TEST.value: {"chain": "test", "vol_size_gb": "50"},
    BtcEnvironment.PROD.value: {"chain": "main", "vol_size_gb": "500"},
}

def set_logger(log_level):
    logging.basicConfig(
        format="%(asctime)s %(levelname)-9s %(funcName)-30s() %(message)s ",
        level=eval(f"logging.{log_level}"),
        datefmt="%Y-%m-%d at %H:%M:%S",
    )

@app.command()
def delete(
    env: BtcEnvironment = typer.Argument(..., help=HELP_MSG_ENV, case_sensitive=False),
    log_level: str = typer.Option("INFO", help="DEBUG, INFO, WARNING, ERROR or CRITICAL"),
):
    """
    Delete instances and volumes associated with the env
    """
    set_logger(log_level)
    env = env.value
    logging.info(f"Deleting environment '{env}' referencing chain '{environments[env]['chain']}'")
    linode.cleanup(env)


@app.command()
def create(
    env: BtcEnvironment = typer.Argument(..., help=HELP_MSG_ENV, case_sensitive=False),
    log_level: str = typer.Option("INFO", help="DEBUG, INFO, WARNING, ERROR or CRITICAL"),
):
    """
    Create instances and volumes associated with the env
    """
    env = env.value
    set_logger(log_level)
    chain = environments[env]["chain"]
    logging.info(f"'{env}' started with values '{environments[env]}'")

    start_time = time.perf_counter()

    vol_label = f"btcvol-{env}"
    linode.cleanup(env)
    linode_id, linode_ip = linode.create_instance(env)
    vol_filesystem_path = linode.create_volume(linode_id, env, vol_label, environments[env]["vol_size_gb"])
    linode.issue_remote_vol_commands(linode_ip, vol_label, vol_filesystem_path)
    bitcoin.launch_bitcoind(linode_ip, chain, vol_label)
    ibl, sod = bitcoin.get_blockchain_info(linode_ip)
    logging.info(f"initialblockdownload = {ibl} with size on disk = {sod}")

    end_time = time.perf_counter()
    logging.info(f"bci completed in {round(end_time - start_time)} seconds.")


@app.command()
def status(
    env: BtcEnvironment = typer.Argument(..., help=HELP_MSG_ENV, case_sensitive=False),
    log_level: str = typer.Option("INFO", help="DEBUG, INFO, WARNING, ERROR or CRITICAL"),
):
    """
    Print status of the bitcoin node in env
    """

    set_logger(log_level)
    env = env.value
    linode_ip = linode.get_ip(env)
    if linode_ip:
        ibl, sod = bitcoin.get_blockchain_info(linode_ip)
        print(f"initialblockdownload = {ibl} with size on disk = " + "{:,}".format(sod) + " bytes" )


if __name__ == "__main__":
    app()
