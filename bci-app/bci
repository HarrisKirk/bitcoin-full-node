#!/usr/bin/env python
"""
BCI (Bitcoin Cloud Infrastructure)
Use linode-cli and shell to spin up and start bitcoin full node.
"""
import subprocess
import os
import json
import logging
import time

logging.basicConfig(
    format="%(asctime)s %(levelname)-9s %(funcName)-30s() %(message)s ",
    level=logging.DEBUG,
    datefmt="%Y-%m-%d at %H:%M:%S",
)
logging.info ('bci running...')

def execute_cli(cmd):
    logging.debug (' '.join(cmd))
    completed_process = subprocess.run(cmd, cwd='.', check=True, shell=False, capture_output=True)
    json_string = completed_process.stdout.decode()
    json_object = json.loads(json_string)
    logging.debug(json.dumps(json_object, indent=2))
    return json_object

def execute_ssh(linode_ip, remote_cmd):
    cmd = ['ssh', '-o', 'StrictHostKeyChecking=no', f"root@{linode_ip}"] + remote_cmd
    logging.debug (' '.join(cmd))
    completed_process = subprocess.run(cmd, cwd='.', check=True, shell=False, capture_output=True)

def issue_remote_vol_commands(linode_ip, vol_label):
    execute_ssh(linode_ip, ['mkfs.ext4', f"/dev/disk/by-id/scsi-0Linode_Volume_{vol_label}"])
    execute_ssh(linode_ip, ['mkdir', f"/mnt/{vol_label}"])
    execute_ssh(linode_ip, ['mount', f"/dev/disk/by-id/scsi-0Linode_Volume_{vol_label}", f"/mnt/{vol_label}"])

def wait_for_running_state(linode_id):
    cmd = ["linode-cli", "linodes", "view", str(linode_id), "--json"]
    logging.debug (' '.join(cmd))

    completed_process = subprocess.run(cmd, cwd='.', check=True, shell=False, capture_output=True)
    json_string = completed_process.stdout.decode()
    json_object = json.loads(json_string)
    linode_status = json_object[0]['status']

    while linode_status != 'running':
        time.sleep(10)
        completed_process = subprocess.run(cmd, cwd='.', check=True, shell=False, capture_output=True)
        json_string = completed_process.stdout.decode()
        json_object = json.loads(json_string)
        linode_status = json_object[0]['status']
        logging.info (f"Status = {linode_status}")

def wait_for_volume_active(vol_id):
    cmd = ["linode-cli", "volumes", "view", str(vol_id), "--json"]
    logging.debug (' '.join(cmd))

    completed_process = subprocess.run(cmd, cwd='.', check=True, shell=False, capture_output=True)
    json_string = completed_process.stdout.decode()
    json_object = json.loads(json_string)
    status = json_object[0]['status']
    logging.info (f"Status = {status}")

    while status != 'active':
        time.sleep(5)
        completed_process = subprocess.run(cmd, cwd='.', check=True, shell=False, capture_output=True)
        json_string = completed_process.stdout.decode()
        json_object = json.loads(json_string)
        status = json_object[0]['status']
        logging.info (f"Status = {status}")
    time.sleep(15) # Ensure volume is active on the linode ('active' status is not enough)

# Create linode
linode_root_pass = os.getenv('LINODE_ROOT_PASSWORD')
p = subprocess.run("cat ~/.ssh/id_rsa.pub", check=True, shell=True, capture_output=True)
ssh_key = p.stdout.decode().rstrip()
cmd = ["linode-cli", "linodes", "create", "--authorized_keys", ssh_key, "--root_pass", linode_root_pass, 
    "--label", "hwk-newark", "--region", "us-east", "--image", "linode/ubuntu21.10", "--type", "g6-standard-1", "--json"]
json_object = execute_cli(cmd)
linode_id = json_object[0]['id']
linode_ip = json_object[0]['ipv4'][0]
logging.info (f"id = {linode_id} being provisioned")

# Wait for running state
logging.info (f"Waiting for linode running status...")
wait_for_running_state(linode_id)
logging.info (f"linode instance {linode_id} status = running.")

# Create a volume
logging.info (f"Creating volume...")
cmd = ["linode-cli", "volumes", "create", "--label", "btcvol", "--region", "us-east", 
    "--linode_id", str(linode_id), "--size", "500", "--json"]
json_object = execute_cli(cmd)
vol_id = json_object[0]['id']
vol_filesystem_path = json_object[0]['filesystem_path']
vol_label = json_object[0]['label']
wait_for_volume_active(vol_id)
logging.info (f"Volume created OK with filesystem_path {vol_filesystem_path} and label '{vol_label}'")

issue_remote_vol_commands(linode_ip, vol_label)

logging.info ('bci done.')













