#!/usr/bin/env python
"""
BCI (Bitcoin Cloud Infrastructure)
Use linode-cli and shell to spin up and start bitcoin full node.
"""
from bci_common import execute_cli, execute_ssh, execute_scp, execute_sh
import os
import sys
import logging
import time

desired_log_level = sys.argv[1]
linode_tags = [sys.argv[2]]
logging.basicConfig(
    format="%(asctime)s %(levelname)-9s %(funcName)-30s() %(message)s ",
    level=eval(desired_log_level),
    datefmt="%Y-%m-%d at %H:%M:%S",
)
logging.debug(f"bci running with log level set to '{desired_log_level}' and linode_tags {linode_tags}")

def issue_remote_vol_commands(linode_ip, vol_label, vol_filesystem_path):
    execute_ssh(linode_ip, ["mkfs.ext4", f"{vol_filesystem_path}"])
    execute_ssh(linode_ip, ["mkdir", f"/mnt/{vol_label}"])
    execute_ssh(linode_ip, ["mount", f"{vol_filesystem_path}", f"/mnt/{vol_label}"])


def wait_for_running_state(linode_id):
    cmd = ["linode-cli", "linodes", "view", str(linode_id), "--json"]
    logging.debug(" ".join(cmd))
    json_object = execute_cli(cmd)
    linode_status = json_object[0]["status"]

    while linode_status != "running":
        time.sleep(10)
        json_object = execute_cli(cmd)
        linode_status = json_object[0]["status"]
        logging.debug(f"Status = {linode_status}")


def wait_for_volume_ready():
    time.sleep(30)  # Ensure volume is ready to be mounted (status = 'active' is not sufficient)


def wait_for_volume_active(vol_id):
    cmd = ["linode-cli", "volumes", "view", str(vol_id), "--json"]
    logging.debug(" ".join(cmd))
    json_object = execute_cli(cmd)
    status = json_object[0]["status"]
    logging.debug(f"Status = {status}")

    while status != "active":
        time.sleep(5)
        json_object = execute_cli(cmd)
        status = json_object[0]["status"]
        logging.debug(f"Status = {status}")
    wait_for_volume_ready()


def wait_for_detached_volume(vol_id):
    cmd = ["linode-cli", "volumes", "view", str(vol_id), "--json"]
    logging.debug(" ".join(cmd))
    json_object = execute_cli(cmd)
    linode_id = json_object[0]["linode_id"]
    logging.debug(f"linode_id = {linode_id}")

    while linode_id != None:
        time.sleep(5)
        json_object = execute_cli(cmd)
        linode_id = json_object[0]["linode_id"]
        logging.debug(f"linode_id = {linode_id}")


def remove_existing_volumes():
    cmd = ["linode-cli", "volumes", "list", "--json"]
    logging.debug(cmd)
    json_object = execute_cli(cmd)
    volume_ids = [vol["id"] for vol in json_object]
    if len(volume_ids) == 0:
        logging.info(f"No volumes found")
    else:
        logging.info(f"Found volume(s) = {volume_ids}")

    for volume_id in volume_ids:
        cmd = ["linode-cli", "volumes", "detach", str(volume_id), "--json"]
        json_object = execute_cli(cmd)
        wait_for_detached_volume(volume_id)
        logging.debug(f"Volume {volume_id} successfully detached.")

    for volume_id in volume_ids:
        cmd = ["linode-cli", "volumes", "delete", str(volume_id)]
        execute_cli(cmd)
        logging.info(f"Volume {volume_id} successfully deleted.")


def remove_instances():
    cmd = ["linode-cli", "linodes", "list", "--json"]
    json_object = execute_cli(cmd)
    instances = json_object
    if len(instances) == 0:
        logging.info(f"No instances found")
    else:
        logging.info(f"Found {len(instances)} instance(s)")
        for instance in instances:
            cmd = ["linode-cli", "linodes", "delete", str(instance["id"])]
            json_object = execute_cli(cmd)
            time.sleep(2)
            logging.info(f"Instance {instance['id']} deleted.")


def cleanup():
    """
    Setup clean environment by removing existing volumes and instances
    """
    remove_existing_volumes()
    remove_instances()


def prepare_for_bitcoin(linode_ip, vol_label):
    execute_ssh(linode_ip, ["chmod", "-R", "770", f"/mnt/{vol_label}"])
    execute_ssh(linode_ip, ["useradd", "-m", "--shell", "/bin/bash", "bitcoinuser"])
    execute_scp(["/opt/devops-bci/startnode.sh", f"root@{linode_ip}:/home/bitcoinuser"])
    logging.debug(execute_ssh(linode_ip, ["/home/bitcoinuser/startnode.sh"]))
    logging.info("Bitcoin software downloaded.")


def create_instance(linode_tags):
    linode_root_pass = os.getenv("LINODE_ROOT_PASSWORD")
    ssh_key = execute_sh("cat ~/.ssh/id_rsa.pub")
    cmd = [
        "linode-cli",
        "linodes",
        "create",
        "--authorized_keys",
        ssh_key,
        "--root_pass",
        linode_root_pass,
        "--label",
        "hwk-newark",
        "--region",
        "us-east",
        "--image",
        "linode/ubuntu21.10",
        "--type",
        "g6-standard-1",
        "--tags",
        ','.join(linode_tags),
        "--json",
    ]
    json_object = execute_cli(cmd)
    linode_id = json_object[0]["id"]
    linode_ip = json_object[0]["ipv4"][0]
    logging.info(f"id = {linode_id} being provisioned...")
    wait_for_running_state(linode_id)
    logging.info(f"linode instance {linode_id} status = running.")
    return linode_id, linode_ip


def create_volume(linode_id, linode_tags):
    logging.info(f"Creating volume...")
    cmd = [
        "linode-cli",
        "volumes",
        "create",
        "--label",
        "btcvol",
        "--region",
        "us-east",
        "--linode_id",
        str(linode_id),
        "--size",
        "500",
        "--tags",
        ','.join(linode_tags),        
        "--json",
    ]
    json_object = execute_cli(cmd)
    vol_id = json_object[0]["id"]
    vol_filesystem_path = json_object[0]["filesystem_path"]
    vol_label = json_object[0]["label"]
    wait_for_volume_active(vol_id)
    logging.info(f"Volume '{vol_label}' created OK with filesystem_path {vol_filesystem_path}")
    return vol_label, vol_filesystem_path


start_time = time.perf_counter()

cleanup()
linode_id, linode_ip = create_instance(linode_tags)
vol_label, vol_filesystem_path = create_volume(linode_id, linode_tags)
issue_remote_vol_commands(linode_ip, vol_label, vol_filesystem_path)
prepare_for_bitcoin(linode_ip, vol_label)

end_time = time.perf_counter()
logging.info(f"bci completed in {end_time - start_time:0.4f} seconds.")
